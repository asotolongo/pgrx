__author__ = 'anthony'
from db import databasepg,log
import config as conf
import queries as queries
import  sys

class descr(object):

    def __init__(self, arg=None):
        self.con = arg
        self.toc = ["**Descriptions DB  generated by the pgrx**"]
        self.toc.append("==========================")
        self.toc.append(" * Descriptions")

    def connect_db(self):
        try:
            return databasepg(conf.PASS, conf.SERVERP, conf.BBDD, conf.USERP, conf.PORTP)
        except ImportError, e:
            print "Error to connect  BD:", str(e)

    def conex(self):
        self.con = self.connect_db()

    def descr_version(self):
        dat = self.con.get_version()
        if len(dat) > 0 :
            r = "\n\n" + '**Server Version** <a name="version"></a>'
            self.toc.append('    * [Version](#version)')
            r = r + "\n" + "PostgreSQL server version # : "+str(dat[0][0])
            return r + "\n\n"
        return  ""

    def descr_uptime(self):
        dat = self.con.executequery(queries.descr_uptime)
        if len(dat) > 0 :
            r = '**Server Uptime** <a name="uptime"></a> '+"\n\n"
            self.toc.append('    * [Uptime](#uptime)')
            r = r +  "Uptime | Uptime From | Config load | Config load From"
            r = r + "\n" + "--- | --- | --- | ---"
            r = r + "\n"+  str(dat[0][0]) + " | " + str(dat[0][1]) + " | " + str(dat[0][2])  + " | " + str(dat[0][3])
            return  r+"\n\n"
        return ""

    def descr_conf(self):
        dat = self.con.executequery(queries.descr_conf)
        if len(dat) > 0:
            r = '**Config Parameters** <a name="conf"></a> ' + "\n\n"
            self.toc.append('    * [Conf Parameters](#conf)')
            r = r + "Parameter | Value "
            r = r + "\n" + "--- | --- "
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1])
            return r + "\n\n"
        return ""

    def descr_owner(self):
        dat = self.con.executequery(queries.descr_owner)
        if len(dat) > 0 :
            r = "\n\n" + '**Database owner** <a name="owner"></a>'
            self.toc.append('    * [Database owner](#owner)')
            r = r + "\n" + "Database owner  : "+str(dat[0][0])
            return r + "\n\n"
        return ""

    def descr_tbl(self):
        dat = self.con.executequery(queries.descr_tbl)
        if len(dat) > 0:
            r = '**Tablespaces** <a name="tbl"></a> ' + "\n\n"
            self.toc.append('    * [Tablespaces](#tbl)')
            r = r + "Tablespace | name | location"
            r = r + "\n" + "--- | --- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1]) + " | " + str(d[2])
            return r + "\n\n"
        return ""

    def descr_summary(self):
        dat = self.con.executequery(queries.descr_summary)
        if len(dat) > 0 :
            r = '**Database summary objects** <a name="summary"></a> '+"\n\n"
            self.toc.append('    * [Summary objects](#summary)')
            r = r +  "Schema | Tables | Indexes | Views | Functions | Triggers | Tables size MB | Indexes Size MB"
            r = r + "\n" + "--- | --- | --- | --- | --- | --- | --- | ---"
            for d in dat:
                r = r + "\n"+  str(d[0]) + " | " + str(d[1]) + " | " + str(d[2])  + " | " + str(d[3])+ " | " + str(d[4])  + " | " + str(d[5])+ " | " + str(d[6])  + " | " + str(d[7])
            return  r+"\n\n"

        return ""

    def descr_stat_db(self):
        dat = self.con.executequery(queries.descr_stat_db)
        if len(dat) > 0:
            r = '**Database stats** <a name="statdb"></a> ' + "\n\n"
            self.toc.append('    * [Database stats](#statdb)')
            r = r + "Connections | Commit | Rollback | %Buffer | %tup_fetched | %tup_inserted | %tup_updated | %tup_deleted | temp_files | deadlocks | conflicts | stats_reset"
            r = r + "\n" + "--- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1]) + " | " + str(d[2])+ " | " + str(d[3]) + " | " + str(d[4])+ " | " + str(d[5]) + " | " + str(d[6])+ " | " + str(d[7]) + " | " + str(d[8])+ " | " + str(d[9]) + " | " + str(d[10])+ " | " + str(d[11])
            return r + "\n\n"
        return ""

    def descr_ext(self):
        dat = self.con.executequery(queries.descr_ext)
        if len(dat) > 0:
            r = '**Extensions** <a name="ext"></a> ' + "\n\n"
            self.toc.append('    * [Extensions](#ext)')
            r = r + "Extensions | "
            r = r + "\n" + "--- | "
            for d in dat:
                r = r + "\n" + str(d[0]) + " | "
            return r + "\n\n"
        return ""

    def descr_schema_per(self):
        dat = self.con.executequery(queries.descr_schema_per)
        if len(dat) > 0:
            r = '**Schemas Permissions** <a name="scheper"></a> ' + "\n\n"
            self.toc.append('    * [Schema Permissions](#scheper)')
            r = r + "Schema | Owner | Permissions"
            r = r + "\n" + "--- | --- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | "+ str(d[1]) + " | "+ str(d[2])
            return r + "\n\n"
        return ""

    def descr_table_per(self):
        dat = self.con.executequery(queries.descr_table_per)
        if len(dat) > 0:
            r = '**Tables Permissions** <a name="tableper"></a> ' + "\n\n"
            self.toc.append('    * [Table Permissions](#tableper)')
            r = r + "Usr | Tab | Permissions"
            r = r + "\n" + "--- | --- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | "+ str(d[1]) + " | "+ str(d[2])
            return r + "\n\n"
        return ""

    def descr_top_referenced_tab(self):
        dat = self.con.executequery(queries.descr_top_referenced_tab)
        if len(dat) > 0:
            r = '**Most Referenced tables** <a name="mostfk"></a> ' + "\n\n"
            self.toc.append('    * [Most Referenced Tables](#mostfk)')
            r = r + "Table | Count | References by table "
            r = r + "\n" + "--- | --- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | "+ str(d[1]) + " | "+ str(d[2])
            return r + "\n\n"
        return ""

    def descr_top_size_tab(self):
        dat = self.con.executequery(queries.descr_top_size_tab)
        if len(dat) > 0:
            r = '**Heaviest tables** <a name="tabsize"></a> ' + "\n\n"
            self.toc.append('    * [Heaviest Tables](#tabsize)')
            r = r + "Table | Size MB "
            r = r + "\n" + "--- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | "+ str(d[1])
            return r + "\n\n"
        return ""

    def descr_top_used_tab(self):
        dat = self.con.executequery(queries.descr_top_used_tab)
        if len(dat) > 0:
            r = '**Most used tables** <a name="tabused"></a> ' + "\n\n"
            self.toc.append('    * [Most used tables(seqscan+indescan)](#tabused)')
            r = r + "Table | Used times "
            r = r + "\n" + "--- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1])
            return r + "\n\n"
        return ""

    def descr_top_used_index(self):
        dat = self.con.executequery(queries.descr_top_used_index)
        if len(dat) > 0:
            r = "\n\n" + '**Most used index**<a name="idxused"></a>' + "\n\n"
            self.toc.append('    * [Most used index](#idxused)')
            r = r + "Schema | Tabble->Idx | Times Used | Idx_Size   "
            r = r + "\n" + "--- | --- | --- | --- "
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1]) + " | " + str(d[2]) + " | " + str(d[3])
            return r + "\n\n"
        return ""

    def descr_top_dead_tup_tab(self):
        dat = self.con.executequery(queries.descr_top_dead_tup_tab)
        if len(dat) > 0:
            r = '**Tables with more dead tuples** <a name="deadtup"></a> ' + "\n\n"
            self.toc.append('    * [Tables with more dead tuples](#deadtup)')
            r = r + "Table | dead tup "
            r = r + "\n" + "--- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1])
            return r + "\n\n"
        return ""

    def descr_top_vaccum_tab(self):
        dat = self.con.executequery(queries.descr_top_vaccum_tab)
        if len(dat) > 0:
            r = '**Maintenence of tables** <a name="vac"></a> ' + "\n\n"
            self.toc.append('    * [Maintenence of tables](#vac)')
            r = r + "Table | Autovaccum | Last Autovaccum | Vaccum |   Last Vaccum "
            r = r + "\n" + "--- | --- | --- | --- | ---"
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1])+ " | " + str(d[2])+ " | " + str(d[3])+ " | " + str(d[4])
            return r + "\n\n"
        return ""

    def descr_latest_vaccum_tab(self):
        dat = self.con.executequery(queries.descr_latest_vaccum_tab)
        if len(dat) > 0:
            r = '**Lastest vacuum tables** <a name="lastvac"></a> ' + "\n\n"
            self.toc.append('    * [Lastest vacuum tables](#lastvac)')
            r = r + "Table | Last vaccum | Vaccum type "
            r = r + "\n" + "--- | --- | --- "
            for d in dat:
                r = r + "\n" + str(d[0]) + " | " + str(d[1])+ " | " + str(d[2])
            return r + "\n\n"
        return ""
